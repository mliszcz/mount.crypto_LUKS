#!/bin/sh
# vim: set ft=sh:
set -e
set -u

if [ "$#" -lt 2 ]
then
  # The interface is specified in mount(8) manual, EXTERNAL HELPERS section.
  echo "usage: $0 spec dir [-sfnv] [-N namespace] [-o options] [-t type.subtype]"
  exit 1
fi

suffix="${0##*.}"
device="$1"
mountpoint="$2"
shift 2

opt_s=
opt_f=
opt_n=
opt_v=
opt_N=
opt_o=
# shellcheck disable=SC2034
opt_t=
options=
while getopts sfnvN:o:t: name
do
  case $name in
    s|f|n|v) eval "opt_$name='-$name'";;
    N|t) eval "opt_$name='-$name $OPTARG'";;
    o) options="$OPTARG";;
    ?) exit 1;;
  esac
done

mapper="$(echo "$device" | tr / _)"

oldifs=$IFS
IFS=,
cryptsetup_options=
access_keyfile=
opt_o="-o helper=$suffix"
for v in $options
do
  case "$v" in
    cryptsetup=*) cryptsetup_options="${v#cryptsetup=}";;
    access-keyfile=*) access_keyfile="${v#access-keyfile=}";;
    *) opt_o="$opt_o,$v";;
  esac
done
IFS=$oldifs

# Access the keyfile as a different user if needed.
# This is required to work-around autofs limitation.
if [ -n "$access_keyfile" ]
then
  IFS=: read -r reuid regid keyfile <<EOF
$access_keyfile
EOF
  setpriv --reuid "$reuid" --regid "$regid" --keep-groups --reset-env ls "$keyfile"
fi

# shellcheck disable=SC2086
cryptsetup luksOpen "$device" "$mapper" $cryptsetup_options

set +e  # Allow failure in mount. We need to close the mapper.
# shellcheck disable=SC2086
mount $opt_s $opt_f $opt_n $opt_v $opt_N $opt_o "/dev/mapper/$mapper" "$mountpoint"
mount_exit_code=$?
set -e

if [ $mount_exit_code -ne 0 ]
then
  cryptsetup close "$mapper"
fi
exit $mount_exit_code
